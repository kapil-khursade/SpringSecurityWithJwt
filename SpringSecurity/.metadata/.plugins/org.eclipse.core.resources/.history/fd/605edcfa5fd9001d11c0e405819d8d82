package com.example.demo.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.DTO.AuthRequest;
import com.example.demo.Entity.User;
import com.example.demo.Exception.UserException;
import com.example.demo.Service.JWTService;
import com.example.demo.Service.UserService;

@RestController
@RequestMapping("/user")
public class UserController {

	@Autowired
	private UserService userService;
	@Autowired
	private JWTService jwtSercie;
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@PostMapping("/register")
	public ResponseEntity<User> registerUserHandler(@RequestBody User user)throws UserException{
		return new ResponseEntity<User>(userService.registerUser(user), HttpStatus.CREATED);
	}
	
	@GetMapping("/getAll")
	@PreAuthorize("hasAuthority('ROLE_ADMIN')")
	public ResponseEntity<List<User>> getAllUserHandler()throws UserException{
		return new ResponseEntity<List<User>>(userService.getAllUser(), HttpStatus.OK);
	}
	
	@GetMapping("/welcome")
	public ResponseEntity<String> welcome()throws UserException{
		return new ResponseEntity<String>("Welcome To Spring Security No Authentication", HttpStatus.OK);
	}
	
	@GetMapping("/welcome2")
	@PreAuthorize("hasAuthority('ROLE_USER')")
	public ResponseEntity<String> welcome2()throws UserException{
		return new ResponseEntity<String>("Welcome To Spring Security With Authentication", HttpStatus.OK);
	}
	
	@GetMapping("/getById/{userId}")
	@PreAuthorize("hasAuthority('ROLE_USER')")
	public ResponseEntity<User> getUserByIdHandler(@PathVariable("userId") Integer userId) throws UserException{
		return new ResponseEntity<User>(userService.getUserById(userId), HttpStatus.OK);
	}
	
	@PostMapping("/authenticate")
	public String authenticateAndGetToken(@RequestBody AuthRequest authRequest) throws UserException {
		
		Authentication authentication = authenticationManager.
				authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword()));
		
		if(authentication.isAuthenticated()) {
	     	return jwtSercie.generateToken(authRequest.getUsername());
		}
		else {
			throw new UserException("User Does Not Found");
		}
	}
}
