package com.example.demo.SpringSecurityConfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	public UserDetailsService userDetailService(PasswordEncoder encoder) {
		UserDetails admin = User.withUsername("kapil")
				.password(encoder.encode("kapil123"))
				.roles("ADMIN")
				.build();
		
		UserDetails user = User.withUsername("kunal")
				.password(encoder.encode("kunal123"))
				.roles("USER")
				.build();
		
		return new InMemoryUserDetailsManager(admin, user);
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		
		return   http.csrf().disable()
				.authorizeHttpRequests()
				.requestMatchers("/user/register", "/user/welcome").permitAll()
				.and()
				.authorizeHttpRequests().requestMatchers("/user/**").authenticated()
				.and().formLogin().and().build();
	}
	
}
